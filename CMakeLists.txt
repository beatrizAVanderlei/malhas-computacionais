cmake_minimum_required(VERSION 3.10)
project(teste)

set(CMAKE_CXX_STANDARD 17)

# ðŸ”¹ Se estiver usando vcpkg, define o toolchain
if(DEFINED ENV{VCPKG_ROOT})
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")
endif()

# ðŸ”¹ Encontrar bibliotecas necessÃ¡rias
find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(glfw3 REQUIRED)

# ðŸ”¹ Encontrar FreeGLUT manualmente
find_library(FREEGLUT_LIBRARY NAMES freeglut PATHS
        "C:/vcpkg/installed/x64-windows/lib"
        "C:/msys64/mingw64/lib"
)
include_directories(
        "C:/vcpkg/installed/x64-windows/include"
        "C:/msys64/mingw64/include"
)

# ðŸ”¹ DiretÃ³rios de inclusÃ£o do projeto
include_directories(${PROJECT_SOURCE_DIR}/models)
include_directories(${PROJECT_SOURCE_DIR}/render)

# ðŸ”¹ Adicionar tinyfiledialogs como biblioteca
add_library(tinyfiledialogs libs/tinyfiledialogs.c)
target_include_directories(tinyfiledialogs PUBLIC ${PROJECT_SOURCE_DIR}/libs)

# ðŸ”¹ Adicionar os arquivos de cÃ³digo-fonte do projeto
add_executable(teste
        src/main.cpp
        models/object/object.cpp
        render/render.cpp
        render/controls.cpp
        models/object/ObjectRendering.cpp
        models/object/ObjectPicking.cpp
        models/object/ObjectEditing.cpp
        utils/string_utils.cpp
        utils/math_utils.cpp
        models/file_io/file_readers.cpp
        models/file_io/file_writers.cpp
        models/file_io/file_io.cpp
        src/performance.cpp
        src/performance-no-prep.cpp
        src/performance-no-prep.h
)

# ðŸ”¹ Vincular as bibliotecas
target_link_libraries(teste
        OpenGL::GL
        GLEW::GLEW
        glfw
        ${FREEGLUT_LIBRARY}
        glu32
        opengl32
        tinyfiledialogs
)
